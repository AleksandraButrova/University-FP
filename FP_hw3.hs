{-- 3.1
Описать функцию minlist, которая ищет минимальный элемент в данном списке.

Пример вызова:
minlist [3,2,7]
Ответ должен быть равен 2.

Замечание: На самом деле, конечно, в    Хаскеле есть такая стандартная функция (называется minimum), 
но, пожалуйста, в этой задаче вы ее не используйте.
--}


minlist1 [] m = m
minlist1 (x:xs) m =   if (m < x) 
                    then minlist1 xs m
                    else minlist1 xs x
minlist (x:xs) = minlist1 xs x




----------------------------------------------------------------------------------------------------
{--3.2
Описать функцию sumprod, которая для списка [x1,x2,x3,x4,...,xn] ищет значение 
x1*x2+x2*x3+x3*x4+.... 
То есть, сумму произведений всех пар стоящих рядом элементов.

Пример вызова:
sumprod [1,3,2,7]
Ответ должен быть равен 1*3+3*2+2*7 = 23.

Замечание: Можно считать, что мы точно знаем, что в списке есть хотя бы два элемента.
--} 

calcsum [] last = 0
calcsum (x:xs) last = last*x + calcsum xs x
sumprod (x:xs) = calcsum xs x 



----------------------------------------------------------------------------------------------------
{--3.3
Описать функцию check cond xs
, которая для данного списка xs и логической функции cond проверяет, верно ли, 
что в списке есть элемент, для которого cond возвращает True. 
Результат должен быть равен True, если такой элемент есть, и False, если его нет.

Примеры вызова:
check (\x->x>5) [3,2,7,4]
Ответ должен быть равен True, потому что в списке есть число, большее 5 (это число 7). 

check (\x->x<1) [3,2,7,4]
Ответ должен быть равен False, потому что в списке нет чисел, меньших 1. 

Замечания:
- Эта задача, конечно, очень похожа на checkPos, которая была на занятии. 
Но только тут надо проверять не конкретное условие, а условие, которое передается, 
как параметр. 
- В Хаскеле есть такая стандартная функция (называется any). Но, пожалуйста, 
в этой задаче вы ее не используйте.
--}


check cond [] = False
check cond (x:xs) = if cond x == True
                    then True
                    else check cond xs


----------------------------------------------------------------------------------------------------
{--3.4
Описать функцию sameDigits, которая возвращает True, если в списке есть два элемента, 
у которых совпадают последние цифры.

Примеры вызова:
sameDigits [13,2,73]
Ответ должен быть равен True, потому что у 13 и 73 одинаковые последние цифры.
sameDigits [13,2,79,5]
Ответ должен быть равен False.
--}
checkOne [] _ = False
checkOne (y:ys) dig =   if mod y 10 == dig
                        then True
                        else checkOne ys dig

sameDigits [] = False
sameDigits (x:xs) = if checkOne xs (mod x 10) == True
                    then True
                    else sameDigits xs

