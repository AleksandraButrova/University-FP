{--
2-1
Будем называть число _почти простым_, если оно равно произведению двух простых чисел. Например, 6 - это почти простое число, а 7 и 8 - нет.
Опишите функцию g, которая для данного целого числа, проверяет, можно ли его представить в виде суммы двух почти простых чисел, и возвращает True или False.

Примеры вызова:
g 6 должно быть равно False
g 13 должно быть равно True (так как 13 = 2*2+3*3).
--}











-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
{--
2-2
Сколько существует строго возрастающих последовательностей положительных целых чисел, сумма которых равна данному числу n?
Например, для n = 9 существуют такие последовательности:
1 2 6, 1 3 5, 1 8, 2 3 4, 2 7, 3 6, 4 5, 9
, то есть ответ на вопрос равен 8

Опишите функцию nseq n, которая вычисляет количество таких последовательностей.

Пример вызова:
nseq 9
Результат должен быть равен 8.
--}


func n i sum_now step = 0 + if n == i
                            then    if sum_now == 0
                                    then 1
                                    else 0
                            else    if sum_now + i == n
                                    then    1 + func n (i-step) (sum_now-(i-step)) (step+1) --here 
                                    else    if sum_now + i < n
                                            then func n (i+step) step (sum_now+i)
                                            else func n i (sum_now - (i-step))  (step+1)   --here


func n curr step sum_now =   if n == i
                        then    if sum_now == 0
                                then 1
                                else 0
                        else    if sum_now + i == n
                                then    1 + func n (i - step + 1) 2 (sum_now+1)   --here 
                                else    if sum_now + i < n
                                        then func n (i+1) step (sum_now + i)
                                        else func n i (step+1) (sum_now - (i-1))    --here

nseq n = func n 1 0 1


1 2 6, 1 3 5, 1 8, 2 3 4, 2 7, 3 6, 4 5, 9

1 
1 2
1 2 3
1 2 3 4
1 2 4
1 2 4 5
1 2 5
1 2 5 6
1 2 6  !!!
1 3 4
1 3 4 5
1 3 5  !!!
1 4 5
1 5 
1 5 6 
1 6 
1 6 7 
1 7
1 7 8
1 8 !!!
2
2 3 
2 3 4 !!!
2 4 
2 4 5
2 5
2 5 6
2 6
2 6 7
2 7 !!!
3 
3 4
3 4 5
3 5
3 5 6
3 6 !!!
4
4 5 !!
5
5 6
6
6 7
7
7 8
8
8 9
9 !!