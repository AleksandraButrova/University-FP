{--15.1
Опишите переменную fives, как бесконечный список [5,55,555,5555,...] – т.е. список из целых положительных чисел, у которых все цифры равны 5.

Пример вызова: 
take 7 fives 
Ответ должен быть равен [5,55,555,5555,55555,555555,5555555]--}

fives = fv 5
            where fv f = f : fv (f*10 + 5)

----------------------------------------------------------------------------------------------------
{--15.2
Используя функцию foldTree с последнего занятия 
(тот вариант, который катаморфизм, в котором у f три параметра),
опишите функцию sumOdd. 
У этой функции параметр - дерево, и она должна вычислять сумму
 всех нечетных чисел в этом дереве. 

Пример вызова: 
sumOdd (Node 3 (Node 2 Empty Empty) (Node 5 Empty Empty)) 
Ответ должен быть равен 8

Замечания:
- эту задачу можно, конечно. решить с помощью любого варианта
  foldTree, но вы решите его, пожалуйста, именно с помощью катаморфизма.
- сам код foldTree тоже надо включить в текст программы, 
иначе тесты не пройдут. Его можно скопировать из слайдов.--}

-- Взято из слайдов
data Tree a = Empty | Node a (Tree a) (Tree a)
foldTree f e (Node val l r) = let
                                resl = foldTree f e l
                                resr = foldTree f e r
                              in f val resl resr
foldTree f e Empty = e

-- Решение
sumOdd = foldTree 
                (\v l r -> if odd v
                           then v+l+r
                           else l+r
                ) 0


----------------------------------------------------------------------------------------------------
{--15.3
Задача про тридевятое царство*
В тридевятом царстве жизнь так устроена, что за все надо платить.. Поэтому, в частности, 
все функции имеют свою цену. И поэтому в тридевятом царстве не бывает, чтобы функция возвращала число, 
она всегда возвращает пару (ответ, цена). Вот примеры функций, которые там пишут:
sin39 x = (sin x, 2)
exp39 x = (exp x, 5)
f x = (x*x+5, 10)

Напишите функцию calculate, которая берет на вход список таких функций и число, 
вызывает все эти функции справа налево и возвращает пару (итоговое значение, итоговая цена).

Пример вызова:
calculate [sin39,exp39,f] 1
Результат должен быть равен (sin(exp(1*1+5)), 17)

Замечание:
- Надо описать только calculate, функции типа sin39 и т.д. описывать не надо, я их сам опишу в тестах. 
(Но конечно, вы должны будете их описать, если хотите сами потестировать решение).--}

calculate funcList x = foldr (\f pair -> (fst (f (fst pair)), snd pair + snd (f (fst pair)))) (x, 0) funcList

sin39 x = (sin x, 2)
exp39 x = (exp x, 5)
fu x = (x*x+5, 10)

test = calculate [sin39,exp39,fu] 1


----------------------------------------------------------------------------------------------------
{--15.4
Напишите катаморфизм для типа Scheme. 

А именно, надо написать функцию foldScheme, с помощью которой, задавая соответствующие параметры, можно 
- найти общее сопротивление схемы
- найти максимальное значение сопротивления в схеме 
- найти количество резисторов
и т.д.

Для того, чтобы были какие-то тесты, напишите, пожалуйста, три примера вызова.
- test1 должен считать общее сопротивление схемы, которая фигурировала в задаче 13-4 
(два резистора 2 Ом соединенные параллельно, и к ним последовательно присоединен еще один резистор 2 Ом)
- test2 должен считать максимальное значение резистора в этой же схеме.
- test3 должен вычислять количество резисторов в этой же схеме

То есть, в программе должны быть какие то такие строки:
test1 = foldScheme ...какие то параметры...
Результат должен быть равен 3
test2 = foldScheme ...какие то параметры...
Результат должен быть равен 2
test3 = foldScheme ...какие то параметры...
Результат должен быть равен 3

Замечание:
- Тип для схемы можете взять тот, который был на занятии или тот, который было в вашем решении, как хотите.
- Если не очень понятно, что делать в этой задаче, напишите, я попробую пояснить.--}



-- Общее сопротивление схемы. Взято из 12-4
data Scheme s = Value s | 
                Сonsistently (Scheme s) (Scheme s) |
                Parallel (Scheme s) (Scheme s)

totalResistance (Value s) = s
totalResistance ( Сonsistently s1 s2 ) = totalResistance s1 + totalResistance s2
totalResistance ( Parallel s1 s2 ) = 1 / (1 / totalResistance s1 + 1 / totalResistance s2)


-- Максимальное сопротивление в схеме

-- Количество резисторов в схеме

-- Решение
foldScheme op ini Scheme = 



-- Тесты
test1 = totalResistance (Сonsistently (Value 2) ( Parallel (Value 2) (Value 2) ) ) 


