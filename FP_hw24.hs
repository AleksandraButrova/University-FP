{--24.1
*Простое упражнение про >>= и do нотацию*

Опишите две функции pow1 и pow2. Обе должны для данного n возвращать список:

[1, 
1, 2^2, 
1, 2^2, 3^3,
...
1, 2^2, 3^3, ..., n^n]

То есть, должен получиться список, в котором 1+2+...+n элементов.

Дополнительные условия:
- pow1 надо написать с помощью оператора >>= и функции return
- pow2 надо написать с помощью do нотации
- в обеих задачах нельзя использовать стандартные функции, кроме >>=, return и арифметики. А во второй задаче и >>= нельзя использовать, только do и return.

Примеры вызова:

pow1 3
pow2 3

В обоих случаях должно получиться:
[1,1,4,1,4,27]--}

pow1 n = [1..n] >>= \x -> 
                    [1..x] >>= \y -> 
                            return (y^y)

pow2 n = do x <- [1..n]
            y <- [1..x]
            return (y^y)

{--24.2
*Maybe рыбка*

В компании X так заботятся о надежности, что приняли решение: 
все функции должны возвращать не просто значение, а Maybe, то есть Just значение или Nothing. 
Вот примеры таких функций:

f i = if i > 0 then Just (-i) else Nothing
g i = if mod i 2 == 0 then Just (div i 2) else Nothing

Описать оператор <=< который работает так же, как оператор . (композиция функций), 
но только для таких функций, возвращающих Maybe.

То есть, надо определить <=<, чтобы f <=< g задавал функцию, которая сначала вызывает g, и потом,
для ответа, вызывает f. И при этом, если одна из функций вернула Nothing, то и ответ будет Nothing.

Примеры вызова:
Если определены описанные выше функции, и потом мы написали
h = f <=< g
,то:
h 10 должно возвращать Just (-5)
h (-10) должно возвращать Nothing
h 9 должно возвращать Nothing и вообще не вызвать f--}

infixr 9 <=<
(<=<) b a = \x -> let
                   res = a x
                  in case res of
                        Nothing -> Nothing
                        Just (res) -> b res


f1 i = if i > 0 then Just (-i) else Nothing
g1 i = if mod i 2 == 0 then Just (div i 2) else Nothing

h = f1 <=< g1



{--24.3
24	3	*Как вывести тип?*

Пусть мы определили функцию
f x [y] = [x True, y]

Какой тип у этой функции? Обоснуйте это с помощью рассуждений. 

Замечание: В этой задаче надо прислать просто текст на русском языке, примерно такой же, 
как в слайдах 9 занятия про вывод типов.--} 

{--Решение
1) Так как f определена с двумя параметрами, то ее тип a1 -> a2 -> a3.
2) Видим, что второй параметр есть список, значит a1 -> [a2] -> a3.
3) Видим, что результатом является список, значит, a1 -> [a2] -> [a3].
4) Так как результат - это список, то типы x True и y совпадают.
Значит, a1 -> [a1] -> [a1].
5) Типа выражения x True может быть только типом Maybe Bool.
Итого, Maybe Bool -> [Maybe Bool] -> [Maybe Bool] --}